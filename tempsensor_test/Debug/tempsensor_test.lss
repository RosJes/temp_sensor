
tempsensor_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00806000  00000c30  00000ce4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c30  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00806004  00806004  00000ce8  2**0
                  ALLOC
  3 .fuse         00000009  00820000  00820000  00000ce8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00000cf1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d50  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000268  00000000  00000000  00000d90  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000455c  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000299b  00000000  00000000  00005554  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001335  00000000  00000000  00007eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000584  00000000  00000000  00009224  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000255e  00000000  00000000  000097a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ea  00000000  00000000  0000bd06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001c0  00000000  00000000  0000c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__vector_8>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__vector_24>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_26>
  6c:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_27>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_29>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_34>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e7       	ldi	r29, 0x7F	; 127
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_copy_data>:
  9c:	10 e6       	ldi	r17, 0x60	; 96
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b0 e6       	ldi	r27, 0x60	; 96
  a2:	e0 e3       	ldi	r30, 0x30	; 48
  a4:	fc e0       	ldi	r31, 0x0C	; 12
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	20 e6       	ldi	r18, 0x60	; 96
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b0 e6       	ldi	r27, 0x60	; 96
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 31       	cpi	r26, 0x1C	; 28
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  c6:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <temperatureConvert>:

int16_t temperatureConvert(uint16_t data);
//======================================================
int16_t temperatureConvert(uint16_t data)
{
	uint16_t sigrow_offset = SIGROW.TEMPSENSE1 /2; //TEMPSENSE1/2
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	f1 e1       	ldi	r31, 0x11	; 17
  d2:	26 81       	ldd	r18, Z+6	; 0x06
  d4:	37 81       	ldd	r19, Z+7	; 0x07
  d6:	36 95       	lsr	r19
  d8:	27 95       	ror	r18
	uint16_t sigrow_slope = SIGROW.TEMPSENSE0 * 2;//TEMPSENSE0*2
  da:	a4 81       	ldd	r26, Z+4	; 0x04
  dc:	b5 81       	ldd	r27, Z+5	; 0x05
  de:	aa 0f       	add	r26, r26
  e0:	bb 1f       	adc	r27, r27
	int32_t temp;
	/* Clear the interrupt flag by reading the result (ADC0.RES) */
	temp = sigrow_offset - data;
  e2:	28 1b       	sub	r18, r24
  e4:	39 0b       	sbc	r19, r25
	/* Result will overflow 16-bit variable */
	temp *= sigrow_slope;
  e6:	0e 94 2f 03 	call	0x65e	; 0x65e <__umulhisi3>
	/* Add 4096/2 to get correct rounding on division below */
	temp += 0x0800;
  ea:	dc 01       	movw	r26, r24
  ec:	cb 01       	movw	r24, r22
  ee:	98 5f       	subi	r25, 0xF8	; 248
  f0:	af 4f       	sbci	r26, 0xFF	; 255
  f2:	bf 4f       	sbci	r27, 0xFF	; 255
	/* Round off to nearest degree in Kelvin, by dividing with 2^12 (4096) */
	temp >>= 12;
  f4:	07 2e       	mov	r0, r23
  f6:	7c e0       	ldi	r23, 0x0C	; 12
  f8:	b5 95       	asr	r27
  fa:	a7 95       	ror	r26
  fc:	97 95       	ror	r25
  fe:	87 95       	ror	r24
 100:	7a 95       	dec	r23
 102:	d1 f7       	brne	.-12     	; 0xf8 <temperatureConvert+0x2a>
 104:	70 2d       	mov	r23, r0
	/* Convert from Kelvin to Celsius (0 Kelvin - 273.15 = -273.1°C) */
	return temp - 273;
}
 106:	81 51       	subi	r24, 0x11	; 17
 108:	91 40       	sbci	r25, 0x01	; 1
 10a:	08 95       	ret

0000010c <main>:

int main(void)
{
    SYSTEM_Initialize();
 10c:	0e 94 1c 03 	call	0x638	; 0x638 <SYSTEM_Initialize>
	uint16_t adc_PF5;//	VM_8V0
    
    while (1)
    {
	    /* Read the conversion result */
	    adcVal = ADC0_GetConversion(ADC_MUXPOS_TEMPSENSE_gc);
 110:	82 e4       	ldi	r24, 0x42	; 66
 112:	0e 94 14 01 	call	0x228	; 0x228 <ADC0_GetConversion>
 116:	ec 01       	movw	r28, r24
		adc_PA7= ADC0_GetConversion(ADC_MUXPOS_AIN27_gc);
 118:	8b e1       	ldi	r24, 0x1B	; 27
 11a:	0e 94 14 01 	call	0x228	; 0x228 <ADC0_GetConversion>
 11e:	38 2e       	mov	r3, r24
 120:	29 2e       	mov	r2, r25
		adc_PD7 =ADC0_GetConversion(ADC_MUXPOS_AIN7_gc);
 122:	87 e0       	ldi	r24, 0x07	; 7
 124:	0e 94 14 01 	call	0x228	; 0x228 <ADC0_GetConversion>
 128:	58 2e       	mov	r5, r24
 12a:	49 2e       	mov	r4, r25
		adc_PF0=ADC0_GetConversion(ADC_MUXPOS_AIN16_gc);
 12c:	80 e1       	ldi	r24, 0x10	; 16
 12e:	0e 94 14 01 	call	0x228	; 0x228 <ADC0_GetConversion>
 132:	78 2e       	mov	r7, r24
 134:	69 2e       	mov	r6, r25
		adc_PF2=ADC0_GetConversion(ADC_MUXPOS_AIN18_gc);
 136:	82 e1       	ldi	r24, 0x12	; 18
 138:	0e 94 14 01 	call	0x228	; 0x228 <ADC0_GetConversion>
 13c:	98 2e       	mov	r9, r24
 13e:	89 2e       	mov	r8, r25
		adc_PF3=ADC0_GetConversion(ADC_MUXPOS_AIN19_gc);
 140:	83 e1       	ldi	r24, 0x13	; 19
 142:	0e 94 14 01 	call	0x228	; 0x228 <ADC0_GetConversion>
 146:	b8 2e       	mov	r11, r24
 148:	a9 2e       	mov	r10, r25
		adc_PF4=ADC0_GetConversion(ADC_MUXPOS_AIN20_gc);
 14a:	84 e1       	ldi	r24, 0x14	; 20
 14c:	0e 94 14 01 	call	0x228	; 0x228 <ADC0_GetConversion>
 150:	d8 2e       	mov	r13, r24
 152:	c9 2e       	mov	r12, r25
		adc_PF5=ADC0_GetConversion(ADC_MUXPOS_AIN21_gc);
 154:	85 e1       	ldi	r24, 0x15	; 21
 156:	0e 94 14 01 	call	0x228	; 0x228 <ADC0_GetConversion>
 15a:	f8 2e       	mov	r15, r24
 15c:	e9 2e       	mov	r14, r25
	    /* Convert the ADC result in degrees C */
	    temp_C = temperatureConvert(adcVal);
 15e:	ce 01       	movw	r24, r28
 160:	0e 94 67 00 	call	0xce	; 0xce <temperatureConvert>
 164:	18 2f       	mov	r17, r24
 166:	09 2f       	mov	r16, r25
		printf("%d",adc_PA7);
 168:	2f 92       	push	r2
 16a:	3f 92       	push	r3
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d0 e6       	ldi	r29, 0x60	; 96
 170:	df 93       	push	r29
 172:	cf 93       	push	r28
 174:	0e 94 3e 03 	call	0x67c	; 0x67c <printf>
		printf("%d",adc_PD7);
 178:	4f 92       	push	r4
 17a:	5f 92       	push	r5
 17c:	df 93       	push	r29
 17e:	cf 93       	push	r28
 180:	0e 94 3e 03 	call	0x67c	; 0x67c <printf>
		printf("%d",adc_PF0);
 184:	6f 92       	push	r6
 186:	7f 92       	push	r7
 188:	df 93       	push	r29
 18a:	cf 93       	push	r28
 18c:	0e 94 3e 03 	call	0x67c	; 0x67c <printf>
		printf("%d",adc_PF2);
 190:	8f 92       	push	r8
 192:	9f 92       	push	r9
 194:	df 93       	push	r29
 196:	cf 93       	push	r28
 198:	0e 94 3e 03 	call	0x67c	; 0x67c <printf>
		printf("%d",adc_PF3);
 19c:	af 92       	push	r10
 19e:	bf 92       	push	r11
 1a0:	df 93       	push	r29
 1a2:	cf 93       	push	r28
 1a4:	0e 94 3e 03 	call	0x67c	; 0x67c <printf>
		printf("%d",adc_PF4);
 1a8:	cf 92       	push	r12
 1aa:	df 92       	push	r13
 1ac:	df 93       	push	r29
 1ae:	cf 93       	push	r28
 1b0:	0e 94 3e 03 	call	0x67c	; 0x67c <printf>
		printf("%d",adc_PF5);
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	df 93       	push	r29
 1ba:	cf 93       	push	r28
 1bc:	0e 94 3e 03 	call	0x67c	; 0x67c <printf>
		printf("%d",temp_C);
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
 1c4:	df 93       	push	r29
 1c6:	cf 93       	push	r28
 1c8:	0e 94 3e 03 	call	0x67c	; 0x67c <printf>
 1cc:	8d b7       	in	r24, 0x3d	; 61
 1ce:	9e b7       	in	r25, 0x3e	; 62
 1d0:	80 96       	adiw	r24, 0x20	; 32
 1d2:	8d bf       	out	0x3d, r24	; 61
 1d4:	9e bf       	out	0x3e, r25	; 62
 1d6:	9c cf       	rjmp	.-200    	; 0x110 <main+0x4>

000001d8 <ADC0_Initialize>:
    ADC0_window_cb = f;
}

void ADC0_RegisterResrdyCallback(adc_irq_cb_t f)
{
    ADC0_resrdy_cb = f;
 1d8:	e0 e0       	ldi	r30, 0x00	; 0
 1da:	f6 e0       	ldi	r31, 0x06	; 6
 1dc:	11 82       	std	Z+1, r1	; 0x01
 1de:	12 82       	std	Z+2, r1	; 0x02
 1e0:	80 e4       	ldi	r24, 0x40	; 64
 1e2:	83 83       	std	Z+3, r24	; 0x03
 1e4:	14 82       	std	Z+4, r1	; 0x04
 1e6:	16 86       	std	Z+14, r1	; 0x0e
 1e8:	13 86       	std	Z+11, r1	; 0x0b
 1ea:	14 86       	std	Z+12, r1	; 0x0c
 1ec:	92 e4       	ldi	r25, 0x42	; 66
 1ee:	90 87       	std	Z+8, r25	; 0x08
 1f0:	81 87       	std	Z+9, r24	; 0x09
 1f2:	8d e1       	ldi	r24, 0x1D	; 29
 1f4:	85 83       	std	Z+5, r24	; 0x05
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	9f e0       	ldi	r25, 0x0F	; 15
 1fa:	84 8b       	std	Z+20, r24	; 0x14
 1fc:	95 8b       	std	Z+21, r25	; 0x15
 1fe:	12 8a       	std	Z+18, r1	; 0x12
 200:	13 8a       	std	Z+19, r1	; 0x13
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 83       	st	Z, r24
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret

0000020a <ADC0_StartConversion>:
 20a:	e0 e0       	ldi	r30, 0x00	; 0
 20c:	f6 e0       	ldi	r31, 0x06	; 6
 20e:	80 87       	std	Z+8, r24	; 0x08
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	82 87       	std	Z+10, r24	; 0x0a
 214:	08 95       	ret

00000216 <ADC0_IsConversionDone>:
 216:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7f060d>
 21a:	81 70       	andi	r24, 0x01	; 1
 21c:	08 95       	ret

0000021e <ADC0_GetConversionResult>:
 21e:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f0610>
 222:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f0611>
 226:	08 95       	ret

00000228 <ADC0_GetConversion>:
 228:	0e 94 05 01 	call	0x20a	; 0x20a <ADC0_StartConversion>
 22c:	0e 94 0b 01 	call	0x216	; 0x216 <ADC0_IsConversionDone>
 230:	88 23       	and	r24, r24
 232:	e1 f3       	breq	.-8      	; 0x22c <ADC0_GetConversion+0x4>
 234:	0e 94 0f 01 	call	0x21e	; 0x21e <ADC0_GetConversionResult>
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	20 93 0d 06 	sts	0x060D, r18	; 0x80060d <__TEXT_REGION_LENGTH__+0x7f060d>
 23e:	08 95       	ret

00000240 <__vector_27>:
}

ISR(ADC0_WCMP_vect)
{        
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
    // Clear the interrupt flag
    ADC0.INTFLAGS = ADC_WCMP_bm;
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	80 93 0d 06 	sts	0x060D, r24	; 0x80060d <__TEXT_REGION_LENGTH__+0x7f060d>

    if (ADC0_window_cb != NULL)
 268:	e0 91 06 60 	lds	r30, 0x6006	; 0x806006 <ADC0_window_cb>
 26c:	f0 91 07 60 	lds	r31, 0x6007	; 0x806007 <ADC0_window_cb+0x1>
 270:	30 97       	sbiw	r30, 0x00	; 0
 272:	09 f0       	breq	.+2      	; 0x276 <__vector_27+0x36>
    {
        ADC0_window_cb();
 274:	09 95       	icall
    }
}
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	7f 91       	pop	r23
 284:	6f 91       	pop	r22
 286:	5f 91       	pop	r21
 288:	4f 91       	pop	r20
 28a:	3f 91       	pop	r19
 28c:	2f 91       	pop	r18
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <__vector_26>:

ISR(ADC0_RESRDY_vect)
{
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	2f 93       	push	r18
 2a4:	3f 93       	push	r19
 2a6:	4f 93       	push	r20
 2a8:	5f 93       	push	r21
 2aa:	6f 93       	push	r22
 2ac:	7f 93       	push	r23
 2ae:	8f 93       	push	r24
 2b0:	9f 93       	push	r25
 2b2:	af 93       	push	r26
 2b4:	bf 93       	push	r27
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
    // Clear the interrupt flag
    ADC0.INTFLAGS = ADC_RESRDY_bm;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	80 93 0d 06 	sts	0x060D, r24	; 0x80060d <__TEXT_REGION_LENGTH__+0x7f060d>

    if (ADC0_resrdy_cb != NULL)
 2c0:	e0 91 04 60 	lds	r30, 0x6004	; 0x806004 <__data_end>
 2c4:	f0 91 05 60 	lds	r31, 0x6005	; 0x806005 <__data_end+0x1>
 2c8:	30 97       	sbiw	r30, 0x00	; 0
 2ca:	09 f0       	breq	.+2      	; 0x2ce <__vector_26+0x36>
    {
        ADC0_resrdy_cb();
 2cc:	09 95       	icall
    }
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	7f 91       	pop	r23
 2dc:	6f 91       	pop	r22
 2de:	5f 91       	pop	r21
 2e0:	4f 91       	pop	r20
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <CLOCK_Initialize>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	68 ed       	ldi	r22, 0xD8	; 216
 2f4:	80 e6       	ldi	r24, 0x60	; 96
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 18 03 	call	0x630	; 0x630 <protected_write_io>
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	68 ed       	ldi	r22, 0xD8	; 216
 300:	81 e6       	ldi	r24, 0x61	; 97
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 18 03 	call	0x630	; 0x630 <protected_write_io>
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	68 ed       	ldi	r22, 0xD8	; 216
 30c:	85 e6       	ldi	r24, 0x65	; 101
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 18 03 	call	0x630	; 0x630 <protected_write_io>
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	68 ed       	ldi	r22, 0xD8	; 216
 318:	88 e7       	ldi	r24, 0x78	; 120
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 18 03 	call	0x630	; 0x630 <protected_write_io>
 320:	44 e0       	ldi	r20, 0x04	; 4
 322:	68 ed       	ldi	r22, 0xD8	; 216
 324:	88 e6       	ldi	r24, 0x68	; 104
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 18 03 	call	0x630	; 0x630 <protected_write_io>
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	68 ed       	ldi	r22, 0xD8	; 216
 330:	89 e6       	ldi	r24, 0x69	; 105
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 18 03 	call	0x630	; 0x630 <protected_write_io>
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	68 ed       	ldi	r22, 0xD8	; 216
 33c:	80 e7       	ldi	r24, 0x70	; 112
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 18 03 	call	0x630	; 0x630 <protected_write_io>
 344:	40 e0       	ldi	r20, 0x00	; 0
 346:	68 ed       	ldi	r22, 0xD8	; 216
 348:	8c e7       	ldi	r24, 0x7C	; 124
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 18 03 	call	0x630	; 0x630 <protected_write_io>
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	68 ed       	ldi	r22, 0xD8	; 216
 354:	82 e6       	ldi	r24, 0x62	; 98
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 18 03 	call	0x630	; 0x630 <protected_write_io>
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	68 ed       	ldi	r22, 0xD8	; 216
 360:	83 e6       	ldi	r24, 0x63	; 99
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 18 03 	call	0x630	; 0x630 <protected_write_io>
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	68 ed       	ldi	r22, 0xD8	; 216
 36c:	84 e6       	ldi	r24, 0x64	; 100
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 18 03 	call	0x630	; 0x630 <protected_write_io>
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	68 ed       	ldi	r22, 0xD8	; 216
 378:	80 e8       	ldi	r24, 0x80	; 128
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 18 03 	call	0x630	; 0x630 <protected_write_io>
    //CSUTHF 256; ENABLE disabled; FRQRANGE 8M; RUNSTBY disabled; SELHF XTAL; 
    ccp_write_io((void*)&(CLKCTRL.XOSCHFCTRLA),0x0);


    // System clock stability check by polling the status register.
    while(!(CLKCTRL.MCLKSTATUS & CLKCTRL_OSCHFS_bm));
 380:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f0065>
 384:	81 ff       	sbrs	r24, 1
 386:	fc cf       	rjmp	.-8      	; 0x380 <CLOCK_Initialize+0x90>


    // System clock stability check by polling the PLL status.
}
 388:	08 95       	ret

0000038a <CPUINT_Initialize>:
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	68 ed       	ldi	r22, 0xD8	; 216
 38e:	80 e1       	ldi	r24, 0x10	; 16
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	0e 94 18 03 	call	0x630	; 0x630 <protected_write_io>

    //CVT disabled; IVSEL disabled; LVL0RR disabled; 
    ccp_write_io((void*)&(CPUINT.CTRLA),0x0);
    
    //LVL0PRI 0; 
    CPUINT.LVL0PRI = 0x0;
 396:	e0 e1       	ldi	r30, 0x10	; 16
 398:	f1 e0       	ldi	r31, 0x01	; 1
 39a:	12 82       	std	Z+2, r1	; 0x02
    
    //LVL1VEC 0; 
    CPUINT.LVL1VEC = 0x0;
 39c:	13 82       	std	Z+3, r1	; 0x03

        
    return 0;
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	08 95       	ret

000003a2 <PA7_DefaultInterruptHandler>:
{
    PA7_InterruptHandler = interruptHandler;
}

void PA7_DefaultInterruptHandler(void)
{
 3a2:	08 95       	ret

000003a4 <PD7_DefaultInterruptHandler>:
{
    PD7_InterruptHandler = interruptHandler;
}

void PD7_DefaultInterruptHandler(void)
{
 3a4:	08 95       	ret

000003a6 <PF0_DefaultInterruptHandler>:
{
    PF0_InterruptHandler = interruptHandler;
}

void PF0_DefaultInterruptHandler(void)
{
 3a6:	08 95       	ret

000003a8 <PF2_DefaultInterruptHandler>:
{
    PF2_InterruptHandler = interruptHandler;
}

void PF2_DefaultInterruptHandler(void)
{
 3a8:	08 95       	ret

000003aa <PF3_DefaultInterruptHandler>:
{
    PF3_InterruptHandler = interruptHandler;
}

void PF3_DefaultInterruptHandler(void)
{
 3aa:	08 95       	ret

000003ac <PF4_DefaultInterruptHandler>:
{
    PF4_InterruptHandler = interruptHandler;
}

void PF4_DefaultInterruptHandler(void)
{
 3ac:	08 95       	ret

000003ae <PF5_DefaultInterruptHandler>:
{
    PF5_InterruptHandler = interruptHandler;
}

void PF5_DefaultInterruptHandler(void)
{
 3ae:	08 95       	ret

000003b0 <PA7_SetInterruptHandler>:
/**
  Allows selecting an interrupt handler for PA7 at application runtime
*/
void PA7_SetInterruptHandler(void (* interruptHandler)(void)) 
{
    PA7_InterruptHandler = interruptHandler;
 3b0:	80 93 14 60 	sts	0x6014, r24	; 0x806014 <PA7_InterruptHandler>
 3b4:	90 93 15 60 	sts	0x6015, r25	; 0x806015 <PA7_InterruptHandler+0x1>
 3b8:	08 95       	ret

000003ba <PD7_SetInterruptHandler>:
/**
  Allows selecting an interrupt handler for PD7 at application runtime
*/
void PD7_SetInterruptHandler(void (* interruptHandler)(void)) 
{
    PD7_InterruptHandler = interruptHandler;
 3ba:	80 93 12 60 	sts	0x6012, r24	; 0x806012 <PD7_InterruptHandler>
 3be:	90 93 13 60 	sts	0x6013, r25	; 0x806013 <PD7_InterruptHandler+0x1>
 3c2:	08 95       	ret

000003c4 <PF0_SetInterruptHandler>:
/**
  Allows selecting an interrupt handler for PF0 at application runtime
*/
void PF0_SetInterruptHandler(void (* interruptHandler)(void)) 
{
    PF0_InterruptHandler = interruptHandler;
 3c4:	80 93 10 60 	sts	0x6010, r24	; 0x806010 <PF0_InterruptHandler>
 3c8:	90 93 11 60 	sts	0x6011, r25	; 0x806011 <PF0_InterruptHandler+0x1>
 3cc:	08 95       	ret

000003ce <PF2_SetInterruptHandler>:
/**
  Allows selecting an interrupt handler for PF2 at application runtime
*/
void PF2_SetInterruptHandler(void (* interruptHandler)(void)) 
{
    PF2_InterruptHandler = interruptHandler;
 3ce:	80 93 0e 60 	sts	0x600E, r24	; 0x80600e <PF2_InterruptHandler>
 3d2:	90 93 0f 60 	sts	0x600F, r25	; 0x80600f <PF2_InterruptHandler+0x1>
 3d6:	08 95       	ret

000003d8 <PF3_SetInterruptHandler>:
/**
  Allows selecting an interrupt handler for PF3 at application runtime
*/
void PF3_SetInterruptHandler(void (* interruptHandler)(void)) 
{
    PF3_InterruptHandler = interruptHandler;
 3d8:	80 93 0c 60 	sts	0x600C, r24	; 0x80600c <PF3_InterruptHandler>
 3dc:	90 93 0d 60 	sts	0x600D, r25	; 0x80600d <PF3_InterruptHandler+0x1>
 3e0:	08 95       	ret

000003e2 <PF4_SetInterruptHandler>:
/**
  Allows selecting an interrupt handler for PF4 at application runtime
*/
void PF4_SetInterruptHandler(void (* interruptHandler)(void)) 
{
    PF4_InterruptHandler = interruptHandler;
 3e2:	80 93 0a 60 	sts	0x600A, r24	; 0x80600a <PF4_InterruptHandler>
 3e6:	90 93 0b 60 	sts	0x600B, r25	; 0x80600b <PF4_InterruptHandler+0x1>
 3ea:	08 95       	ret

000003ec <PF5_SetInterruptHandler>:
/**
  Allows selecting an interrupt handler for PF5 at application runtime
*/
void PF5_SetInterruptHandler(void (* interruptHandler)(void)) 
{
    PF5_InterruptHandler = interruptHandler;
 3ec:	80 93 08 60 	sts	0x6008, r24	; 0x806008 <PF5_InterruptHandler>
 3f0:	90 93 09 60 	sts	0x6009, r25	; 0x806009 <PF5_InterruptHandler+0x1>
 3f4:	08 95       	ret

000003f6 <PIN_MANAGER_Initialize>:
static void (*PF3_InterruptHandler)(void);
static void (*PF4_InterruptHandler)(void);
static void (*PF5_InterruptHandler)(void);

void PIN_MANAGER_Initialize()
{
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
  /* DIR Registers Initialization */
    PORTA.DIR = 0x0;
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	94 e0       	ldi	r25, 0x04	; 4
 3fe:	fc 01       	movw	r30, r24
 400:	10 82       	st	Z, r1
    PORTC.DIR = 0x0;
 402:	c0 e4       	ldi	r28, 0x40	; 64
 404:	d4 e0       	ldi	r29, 0x04	; 4
 406:	18 82       	st	Y, r1
    PORTD.DIR = 0x0;
 408:	a0 e6       	ldi	r26, 0x60	; 96
 40a:	b4 e0       	ldi	r27, 0x04	; 4
 40c:	1c 92       	st	X, r1
    PORTF.DIR = 0x0;
 40e:	20 ea       	ldi	r18, 0xA0	; 160
 410:	34 e0       	ldi	r19, 0x04	; 4
 412:	f9 01       	movw	r30, r18
 414:	10 82       	st	Z, r1

  /* OUT Registers Initialization */
    PORTA.OUT = 0x0;
 416:	fc 01       	movw	r30, r24
 418:	14 82       	std	Z+4, r1	; 0x04
    PORTC.OUT = 0x0;
 41a:	1c 82       	std	Y+4, r1	; 0x04
    PORTD.OUT = 0x0;
 41c:	14 96       	adiw	r26, 0x04	; 4
 41e:	1c 92       	st	X, r1
 420:	14 97       	sbiw	r26, 0x04	; 4
    PORTF.OUT = 0x0;
 422:	f9 01       	movw	r30, r18
 424:	14 82       	std	Z+4, r1	; 0x04

  /* PINxCTRL registers Initialization */
    PORTA.PIN0CTRL = 0x0;
 426:	fc 01       	movw	r30, r24
 428:	10 8a       	std	Z+16, r1	; 0x10
    PORTA.PIN1CTRL = 0x0;
 42a:	11 8a       	std	Z+17, r1	; 0x11
    PORTA.PIN2CTRL = 0x0;
 42c:	12 8a       	std	Z+18, r1	; 0x12
    PORTA.PIN3CTRL = 0x0;
 42e:	13 8a       	std	Z+19, r1	; 0x13
    PORTA.PIN4CTRL = 0x0;
 430:	14 8a       	std	Z+20, r1	; 0x14
    PORTA.PIN5CTRL = 0x0;
 432:	15 8a       	std	Z+21, r1	; 0x15
    PORTA.PIN6CTRL = 0x0;
 434:	16 8a       	std	Z+22, r1	; 0x16
    PORTA.PIN7CTRL = 0x0;
 436:	17 8a       	std	Z+23, r1	; 0x17
    PORTC.PIN0CTRL = 0x0;
 438:	18 8a       	std	Y+16, r1	; 0x10
    PORTC.PIN1CTRL = 0x0;
 43a:	19 8a       	std	Y+17, r1	; 0x11
    PORTC.PIN2CTRL = 0x0;
 43c:	1a 8a       	std	Y+18, r1	; 0x12
    PORTC.PIN3CTRL = 0x0;
 43e:	1b 8a       	std	Y+19, r1	; 0x13
    PORTC.PIN4CTRL = 0x0;
 440:	1c 8a       	std	Y+20, r1	; 0x14
    PORTC.PIN5CTRL = 0x0;
 442:	1d 8a       	std	Y+21, r1	; 0x15
    PORTC.PIN6CTRL = 0x0;
 444:	1e 8a       	std	Y+22, r1	; 0x16
    PORTC.PIN7CTRL = 0x0;
 446:	1f 8a       	std	Y+23, r1	; 0x17
    PORTD.PIN0CTRL = 0x0;
 448:	50 96       	adiw	r26, 0x10	; 16
 44a:	1c 92       	st	X, r1
 44c:	50 97       	sbiw	r26, 0x10	; 16
    PORTD.PIN1CTRL = 0x0;
 44e:	51 96       	adiw	r26, 0x11	; 17
 450:	1c 92       	st	X, r1
 452:	51 97       	sbiw	r26, 0x11	; 17
    PORTD.PIN2CTRL = 0x0;
 454:	52 96       	adiw	r26, 0x12	; 18
 456:	1c 92       	st	X, r1
 458:	52 97       	sbiw	r26, 0x12	; 18
    PORTD.PIN3CTRL = 0x0;
 45a:	53 96       	adiw	r26, 0x13	; 19
 45c:	1c 92       	st	X, r1
 45e:	53 97       	sbiw	r26, 0x13	; 19
    PORTD.PIN4CTRL = 0x0;
 460:	54 96       	adiw	r26, 0x14	; 20
 462:	1c 92       	st	X, r1
 464:	54 97       	sbiw	r26, 0x14	; 20
    PORTD.PIN5CTRL = 0x0;
 466:	55 96       	adiw	r26, 0x15	; 21
 468:	1c 92       	st	X, r1
 46a:	55 97       	sbiw	r26, 0x15	; 21
    PORTD.PIN6CTRL = 0x0;
 46c:	56 96       	adiw	r26, 0x16	; 22
 46e:	1c 92       	st	X, r1
 470:	56 97       	sbiw	r26, 0x16	; 22
    PORTD.PIN7CTRL = 0x0;
 472:	57 96       	adiw	r26, 0x17	; 23
 474:	1c 92       	st	X, r1
    PORTF.PIN0CTRL = 0x0;
 476:	f9 01       	movw	r30, r18
 478:	10 8a       	std	Z+16, r1	; 0x10
    PORTF.PIN1CTRL = 0x0;
 47a:	11 8a       	std	Z+17, r1	; 0x11
    PORTF.PIN2CTRL = 0x0;
 47c:	12 8a       	std	Z+18, r1	; 0x12
    PORTF.PIN3CTRL = 0x0;
 47e:	13 8a       	std	Z+19, r1	; 0x13
    PORTF.PIN4CTRL = 0x0;
 480:	14 8a       	std	Z+20, r1	; 0x14
    PORTF.PIN5CTRL = 0x0;
 482:	15 8a       	std	Z+21, r1	; 0x15
    PORTF.PIN6CTRL = 0x0;
 484:	16 8a       	std	Z+22, r1	; 0x16
    PORTF.PIN7CTRL = 0x0;
 486:	17 8a       	std	Z+23, r1	; 0x17

  /* PORTMUX Initialization */
    PORTMUX.CCLROUTEA = 0x0;
 488:	e0 ee       	ldi	r30, 0xE0	; 224
 48a:	f5 e0       	ldi	r31, 0x05	; 5
 48c:	11 82       	std	Z+1, r1	; 0x01
    PORTMUX.EVSYSROUTEA = 0x0;
 48e:	10 82       	st	Z, r1
    PORTMUX.SPIROUTEA = 0x0;
 490:	15 82       	std	Z+5, r1	; 0x05
    PORTMUX.TCAROUTEA = 0x0;
 492:	17 82       	std	Z+7, r1	; 0x07
    PORTMUX.TCBROUTEA = 0x0;
 494:	10 86       	std	Z+8, r1	; 0x08
    PORTMUX.TCDROUTEA = 0x0;
 496:	11 86       	std	Z+9, r1	; 0x09
    PORTMUX.TWIROUTEA = 0x0;
 498:	16 82       	std	Z+6, r1	; 0x06
    PORTMUX.USARTROUTEA = 0x0;
 49a:	12 82       	std	Z+2, r1	; 0x02

  // register default ISC callback functions at runtime; use these methods to register a custom function
    PA7_SetInterruptHandler(PA7_DefaultInterruptHandler);
 49c:	81 ed       	ldi	r24, 0xD1	; 209
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <PA7_SetInterruptHandler>
    PD7_SetInterruptHandler(PD7_DefaultInterruptHandler);
 4a4:	82 ed       	ldi	r24, 0xD2	; 210
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <PD7_SetInterruptHandler>
    PF0_SetInterruptHandler(PF0_DefaultInterruptHandler);
 4ac:	83 ed       	ldi	r24, 0xD3	; 211
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <PF0_SetInterruptHandler>
    PF2_SetInterruptHandler(PF2_DefaultInterruptHandler);
 4b4:	84 ed       	ldi	r24, 0xD4	; 212
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <PF2_SetInterruptHandler>
    PF3_SetInterruptHandler(PF3_DefaultInterruptHandler);
 4bc:	85 ed       	ldi	r24, 0xD5	; 213
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <PF3_SetInterruptHandler>
    PF4_SetInterruptHandler(PF4_DefaultInterruptHandler);
 4c4:	86 ed       	ldi	r24, 0xD6	; 214
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <PF4_SetInterruptHandler>
    PF5_SetInterruptHandler(PF5_DefaultInterruptHandler);
 4cc:	87 ed       	ldi	r24, 0xD7	; 215
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <PF5_SetInterruptHandler>
}
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <__vector_8>:
{
    // add your PF5 interrupt custom code
    // or set custom function using PF5_SetInterruptHandler()
}
ISR(PORTA_PORT_vect)
{ 
 4da:	1f 92       	push	r1
 4dc:	0f 92       	push	r0
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	0f 92       	push	r0
 4e2:	11 24       	eor	r1, r1
 4e4:	2f 93       	push	r18
 4e6:	3f 93       	push	r19
 4e8:	4f 93       	push	r20
 4ea:	5f 93       	push	r21
 4ec:	6f 93       	push	r22
 4ee:	7f 93       	push	r23
 4f0:	8f 93       	push	r24
 4f2:	9f 93       	push	r25
 4f4:	af 93       	push	r26
 4f6:	bf 93       	push	r27
 4f8:	ef 93       	push	r30
 4fa:	ff 93       	push	r31
    // Call the interrupt handler for the callback registered at runtime
    if(VPORTA.INTFLAGS & PORT_INT7_bm)
 4fc:	1f 9b       	sbis	0x03, 7	; 3
 4fe:	05 c0       	rjmp	.+10     	; 0x50a <__vector_8+0x30>
    {
       PA7_InterruptHandler(); 
 500:	e0 91 14 60 	lds	r30, 0x6014	; 0x806014 <PA7_InterruptHandler>
 504:	f0 91 15 60 	lds	r31, 0x6015	; 0x806015 <PA7_InterruptHandler+0x1>
 508:	09 95       	icall
    }
    /* Clear interrupt flags */
    VPORTA.INTFLAGS = 0xff;
 50a:	8f ef       	ldi	r24, 0xFF	; 255
 50c:	83 b9       	out	0x03, r24	; 3
}
 50e:	ff 91       	pop	r31
 510:	ef 91       	pop	r30
 512:	bf 91       	pop	r27
 514:	af 91       	pop	r26
 516:	9f 91       	pop	r25
 518:	8f 91       	pop	r24
 51a:	7f 91       	pop	r23
 51c:	6f 91       	pop	r22
 51e:	5f 91       	pop	r21
 520:	4f 91       	pop	r20
 522:	3f 91       	pop	r19
 524:	2f 91       	pop	r18
 526:	0f 90       	pop	r0
 528:	0f be       	out	0x3f, r0	; 63
 52a:	0f 90       	pop	r0
 52c:	1f 90       	pop	r1
 52e:	18 95       	reti

00000530 <__vector_29>:

ISR(PORTC_PORT_vect)
{ 
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	11 24       	eor	r1, r1
 53a:	8f 93       	push	r24
    /* Clear interrupt flags */
    VPORTC.INTFLAGS = 0xff;
 53c:	8f ef       	ldi	r24, 0xFF	; 255
 53e:	8b b9       	out	0x0b, r24	; 11
}
 540:	8f 91       	pop	r24
 542:	0f 90       	pop	r0
 544:	0f be       	out	0x3f, r0	; 63
 546:	0f 90       	pop	r0
 548:	1f 90       	pop	r1
 54a:	18 95       	reti

0000054c <__vector_24>:

ISR(PORTD_PORT_vect)
{ 
 54c:	1f 92       	push	r1
 54e:	0f 92       	push	r0
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	0f 92       	push	r0
 554:	11 24       	eor	r1, r1
 556:	2f 93       	push	r18
 558:	3f 93       	push	r19
 55a:	4f 93       	push	r20
 55c:	5f 93       	push	r21
 55e:	6f 93       	push	r22
 560:	7f 93       	push	r23
 562:	8f 93       	push	r24
 564:	9f 93       	push	r25
 566:	af 93       	push	r26
 568:	bf 93       	push	r27
 56a:	ef 93       	push	r30
 56c:	ff 93       	push	r31
    // Call the interrupt handler for the callback registered at runtime
    if(VPORTD.INTFLAGS & PORT_INT7_bm)
 56e:	7f 9b       	sbis	0x0f, 7	; 15
 570:	05 c0       	rjmp	.+10     	; 0x57c <__vector_24+0x30>
    {
       PD7_InterruptHandler(); 
 572:	e0 91 12 60 	lds	r30, 0x6012	; 0x806012 <PD7_InterruptHandler>
 576:	f0 91 13 60 	lds	r31, 0x6013	; 0x806013 <PD7_InterruptHandler+0x1>
 57a:	09 95       	icall
    }
    /* Clear interrupt flags */
    VPORTD.INTFLAGS = 0xff;
 57c:	8f ef       	ldi	r24, 0xFF	; 255
 57e:	8f b9       	out	0x0f, r24	; 15
}
 580:	ff 91       	pop	r31
 582:	ef 91       	pop	r30
 584:	bf 91       	pop	r27
 586:	af 91       	pop	r26
 588:	9f 91       	pop	r25
 58a:	8f 91       	pop	r24
 58c:	7f 91       	pop	r23
 58e:	6f 91       	pop	r22
 590:	5f 91       	pop	r21
 592:	4f 91       	pop	r20
 594:	3f 91       	pop	r19
 596:	2f 91       	pop	r18
 598:	0f 90       	pop	r0
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	0f 90       	pop	r0
 59e:	1f 90       	pop	r1
 5a0:	18 95       	reti

000005a2 <__vector_34>:

ISR(PORTF_PORT_vect)
{ 
 5a2:	1f 92       	push	r1
 5a4:	0f 92       	push	r0
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	0f 92       	push	r0
 5aa:	11 24       	eor	r1, r1
 5ac:	2f 93       	push	r18
 5ae:	3f 93       	push	r19
 5b0:	4f 93       	push	r20
 5b2:	5f 93       	push	r21
 5b4:	6f 93       	push	r22
 5b6:	7f 93       	push	r23
 5b8:	8f 93       	push	r24
 5ba:	9f 93       	push	r25
 5bc:	af 93       	push	r26
 5be:	bf 93       	push	r27
 5c0:	ef 93       	push	r30
 5c2:	ff 93       	push	r31
    // Call the interrupt handler for the callback registered at runtime
    if(VPORTF.INTFLAGS & PORT_INT0_bm)
 5c4:	b8 9b       	sbis	0x17, 0	; 23
 5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <__vector_34+0x30>
    {
       PF0_InterruptHandler(); 
 5c8:	e0 91 10 60 	lds	r30, 0x6010	; 0x806010 <PF0_InterruptHandler>
 5cc:	f0 91 11 60 	lds	r31, 0x6011	; 0x806011 <PF0_InterruptHandler+0x1>
 5d0:	09 95       	icall
    }
    if(VPORTF.INTFLAGS & PORT_INT2_bm)
 5d2:	ba 9b       	sbis	0x17, 2	; 23
 5d4:	05 c0       	rjmp	.+10     	; 0x5e0 <__vector_34+0x3e>
    {
       PF2_InterruptHandler(); 
 5d6:	e0 91 0e 60 	lds	r30, 0x600E	; 0x80600e <PF2_InterruptHandler>
 5da:	f0 91 0f 60 	lds	r31, 0x600F	; 0x80600f <PF2_InterruptHandler+0x1>
 5de:	09 95       	icall
    }
    if(VPORTF.INTFLAGS & PORT_INT3_bm)
 5e0:	bb 9b       	sbis	0x17, 3	; 23
 5e2:	05 c0       	rjmp	.+10     	; 0x5ee <__vector_34+0x4c>
    {
       PF3_InterruptHandler(); 
 5e4:	e0 91 0c 60 	lds	r30, 0x600C	; 0x80600c <PF3_InterruptHandler>
 5e8:	f0 91 0d 60 	lds	r31, 0x600D	; 0x80600d <PF3_InterruptHandler+0x1>
 5ec:	09 95       	icall
    }
    if(VPORTF.INTFLAGS & PORT_INT4_bm)
 5ee:	bc 9b       	sbis	0x17, 4	; 23
 5f0:	05 c0       	rjmp	.+10     	; 0x5fc <__vector_34+0x5a>
    {
       PF4_InterruptHandler(); 
 5f2:	e0 91 0a 60 	lds	r30, 0x600A	; 0x80600a <PF4_InterruptHandler>
 5f6:	f0 91 0b 60 	lds	r31, 0x600B	; 0x80600b <PF4_InterruptHandler+0x1>
 5fa:	09 95       	icall
    }
    if(VPORTF.INTFLAGS & PORT_INT5_bm)
 5fc:	bd 9b       	sbis	0x17, 5	; 23
 5fe:	05 c0       	rjmp	.+10     	; 0x60a <__vector_34+0x68>
    {
       PF5_InterruptHandler(); 
 600:	e0 91 08 60 	lds	r30, 0x6008	; 0x806008 <PF5_InterruptHandler>
 604:	f0 91 09 60 	lds	r31, 0x6009	; 0x806009 <PF5_InterruptHandler+0x1>
 608:	09 95       	icall
    }
    /* Clear interrupt flags */
    VPORTF.INTFLAGS = 0xff;
 60a:	8f ef       	ldi	r24, 0xFF	; 255
 60c:	87 bb       	out	0x17, r24	; 23
}
 60e:	ff 91       	pop	r31
 610:	ef 91       	pop	r30
 612:	bf 91       	pop	r27
 614:	af 91       	pop	r26
 616:	9f 91       	pop	r25
 618:	8f 91       	pop	r24
 61a:	7f 91       	pop	r23
 61c:	6f 91       	pop	r22
 61e:	5f 91       	pop	r21
 620:	4f 91       	pop	r20
 622:	3f 91       	pop	r19
 624:	2f 91       	pop	r18
 626:	0f 90       	pop	r0
 628:	0f be       	out	0x3f, r0	; 63
 62a:	0f 90       	pop	r0
 62c:	1f 90       	pop	r1
 62e:	18 95       	reti

00000630 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 630:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 632:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 634:	40 83       	st	Z, r20
	ret                             // Return to caller
 636:	08 95       	ret

00000638 <SYSTEM_Initialize>:
**/


void SYSTEM_Initialize(void)
{
    PIN_MANAGER_Initialize();
 638:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <PIN_MANAGER_Initialize>
    ADC0_Initialize();
 63c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <ADC0_Initialize>
    CLOCK_Initialize();
 640:	0e 94 78 01 	call	0x2f0	; 0x2f0 <CLOCK_Initialize>
    VREF_Initialize();
 644:	0e 94 27 03 	call	0x64e	; 0x64e <VREF_Initialize>
    CPUINT_Initialize();
 648:	0e 94 c5 01 	call	0x38a	; 0x38a <CPUINT_Initialize>
 64c:	08 95       	ret

0000064e <VREF_Initialize>:
#include "../vref.h"

int8_t VREF_Initialize(void)
{
    // ALWAYSON disabled; REFSEL Internal 1.024V reference; 
    VREF.ACREF = 0x0;
 64e:	e0 eb       	ldi	r30, 0xB0	; 176
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	14 82       	std	Z+4, r1	; 0x04
    
    // ALWAYSON disabled; REFSEL Internal 4.096V reference; 
    VREF.ADC0REF = 0x2;
 654:	82 e0       	ldi	r24, 0x02	; 2
 656:	80 83       	st	Z, r24
    
    // ALWAYSON disabled; REFSEL Internal 1.024V reference; 
    VREF.DAC0REF = 0x0;
 658:	12 82       	std	Z+2, r1	; 0x02
    
	return 0;
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	08 95       	ret

0000065e <__umulhisi3>:
 65e:	a2 9f       	mul	r26, r18
 660:	b0 01       	movw	r22, r0
 662:	b3 9f       	mul	r27, r19
 664:	c0 01       	movw	r24, r0
 666:	a3 9f       	mul	r26, r19
 668:	70 0d       	add	r23, r0
 66a:	81 1d       	adc	r24, r1
 66c:	11 24       	eor	r1, r1
 66e:	91 1d       	adc	r25, r1
 670:	b2 9f       	mul	r27, r18
 672:	70 0d       	add	r23, r0
 674:	81 1d       	adc	r24, r1
 676:	11 24       	eor	r1, r1
 678:	91 1d       	adc	r25, r1
 67a:	08 95       	ret

0000067c <printf>:
 67c:	a0 e0       	ldi	r26, 0x00	; 0
 67e:	b0 e0       	ldi	r27, 0x00	; 0
 680:	e4 e4       	ldi	r30, 0x44	; 68
 682:	f3 e0       	ldi	r31, 0x03	; 3
 684:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__prologue_saves__+0x20>
 688:	ae 01       	movw	r20, r28
 68a:	4b 5f       	subi	r20, 0xFB	; 251
 68c:	5f 4f       	sbci	r21, 0xFF	; 255
 68e:	fa 01       	movw	r30, r20
 690:	61 91       	ld	r22, Z+
 692:	71 91       	ld	r23, Z+
 694:	af 01       	movw	r20, r30
 696:	80 91 18 60 	lds	r24, 0x6018	; 0x806018 <__iob+0x2>
 69a:	90 91 19 60 	lds	r25, 0x6019	; 0x806019 <__iob+0x3>
 69e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <vfprintf>
 6a2:	e2 e0       	ldi	r30, 0x02	; 2
 6a4:	0c 94 0e 06 	jmp	0xc1c	; 0xc1c <__epilogue_restores__+0x20>

000006a8 <vfprintf>:
 6a8:	ab e0       	ldi	r26, 0x0B	; 11
 6aa:	b0 e0       	ldi	r27, 0x00	; 0
 6ac:	ea e5       	ldi	r30, 0x5A	; 90
 6ae:	f3 e0       	ldi	r31, 0x03	; 3
 6b0:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__prologue_saves__>
 6b4:	6c 01       	movw	r12, r24
 6b6:	7b 01       	movw	r14, r22
 6b8:	8a 01       	movw	r16, r20
 6ba:	fc 01       	movw	r30, r24
 6bc:	16 82       	std	Z+6, r1	; 0x06
 6be:	17 82       	std	Z+7, r1	; 0x07
 6c0:	83 81       	ldd	r24, Z+3	; 0x03
 6c2:	81 ff       	sbrs	r24, 1
 6c4:	cc c1       	rjmp	.+920    	; 0xa5e <vfprintf+0x3b6>
 6c6:	ce 01       	movw	r24, r28
 6c8:	01 96       	adiw	r24, 0x01	; 1
 6ca:	3c 01       	movw	r6, r24
 6cc:	f6 01       	movw	r30, r12
 6ce:	93 81       	ldd	r25, Z+3	; 0x03
 6d0:	f7 01       	movw	r30, r14
 6d2:	93 fd       	sbrc	r25, 3
 6d4:	85 91       	lpm	r24, Z+
 6d6:	93 ff       	sbrs	r25, 3
 6d8:	81 91       	ld	r24, Z+
 6da:	7f 01       	movw	r14, r30
 6dc:	88 23       	and	r24, r24
 6de:	09 f4       	brne	.+2      	; 0x6e2 <vfprintf+0x3a>
 6e0:	ba c1       	rjmp	.+884    	; 0xa56 <vfprintf+0x3ae>
 6e2:	85 32       	cpi	r24, 0x25	; 37
 6e4:	39 f4       	brne	.+14     	; 0x6f4 <vfprintf+0x4c>
 6e6:	93 fd       	sbrc	r25, 3
 6e8:	85 91       	lpm	r24, Z+
 6ea:	93 ff       	sbrs	r25, 3
 6ec:	81 91       	ld	r24, Z+
 6ee:	7f 01       	movw	r14, r30
 6f0:	85 32       	cpi	r24, 0x25	; 37
 6f2:	29 f4       	brne	.+10     	; 0x6fe <vfprintf+0x56>
 6f4:	b6 01       	movw	r22, r12
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 6fc:	e7 cf       	rjmp	.-50     	; 0x6cc <vfprintf+0x24>
 6fe:	91 2c       	mov	r9, r1
 700:	21 2c       	mov	r2, r1
 702:	31 2c       	mov	r3, r1
 704:	ff e1       	ldi	r31, 0x1F	; 31
 706:	f3 15       	cp	r31, r3
 708:	d8 f0       	brcs	.+54     	; 0x740 <vfprintf+0x98>
 70a:	8b 32       	cpi	r24, 0x2B	; 43
 70c:	79 f0       	breq	.+30     	; 0x72c <vfprintf+0x84>
 70e:	38 f4       	brcc	.+14     	; 0x71e <vfprintf+0x76>
 710:	80 32       	cpi	r24, 0x20	; 32
 712:	79 f0       	breq	.+30     	; 0x732 <vfprintf+0x8a>
 714:	83 32       	cpi	r24, 0x23	; 35
 716:	a1 f4       	brne	.+40     	; 0x740 <vfprintf+0x98>
 718:	23 2d       	mov	r18, r3
 71a:	20 61       	ori	r18, 0x10	; 16
 71c:	1d c0       	rjmp	.+58     	; 0x758 <vfprintf+0xb0>
 71e:	8d 32       	cpi	r24, 0x2D	; 45
 720:	61 f0       	breq	.+24     	; 0x73a <vfprintf+0x92>
 722:	80 33       	cpi	r24, 0x30	; 48
 724:	69 f4       	brne	.+26     	; 0x740 <vfprintf+0x98>
 726:	23 2d       	mov	r18, r3
 728:	21 60       	ori	r18, 0x01	; 1
 72a:	16 c0       	rjmp	.+44     	; 0x758 <vfprintf+0xb0>
 72c:	83 2d       	mov	r24, r3
 72e:	82 60       	ori	r24, 0x02	; 2
 730:	38 2e       	mov	r3, r24
 732:	e3 2d       	mov	r30, r3
 734:	e4 60       	ori	r30, 0x04	; 4
 736:	3e 2e       	mov	r3, r30
 738:	2a c0       	rjmp	.+84     	; 0x78e <vfprintf+0xe6>
 73a:	f3 2d       	mov	r31, r3
 73c:	f8 60       	ori	r31, 0x08	; 8
 73e:	1d c0       	rjmp	.+58     	; 0x77a <vfprintf+0xd2>
 740:	37 fc       	sbrc	r3, 7
 742:	2d c0       	rjmp	.+90     	; 0x79e <vfprintf+0xf6>
 744:	20 ed       	ldi	r18, 0xD0	; 208
 746:	28 0f       	add	r18, r24
 748:	2a 30       	cpi	r18, 0x0A	; 10
 74a:	40 f0       	brcs	.+16     	; 0x75c <vfprintf+0xb4>
 74c:	8e 32       	cpi	r24, 0x2E	; 46
 74e:	b9 f4       	brne	.+46     	; 0x77e <vfprintf+0xd6>
 750:	36 fc       	sbrc	r3, 6
 752:	81 c1       	rjmp	.+770    	; 0xa56 <vfprintf+0x3ae>
 754:	23 2d       	mov	r18, r3
 756:	20 64       	ori	r18, 0x40	; 64
 758:	32 2e       	mov	r3, r18
 75a:	19 c0       	rjmp	.+50     	; 0x78e <vfprintf+0xe6>
 75c:	36 fe       	sbrs	r3, 6
 75e:	06 c0       	rjmp	.+12     	; 0x76c <vfprintf+0xc4>
 760:	8a e0       	ldi	r24, 0x0A	; 10
 762:	98 9e       	mul	r9, r24
 764:	20 0d       	add	r18, r0
 766:	11 24       	eor	r1, r1
 768:	92 2e       	mov	r9, r18
 76a:	11 c0       	rjmp	.+34     	; 0x78e <vfprintf+0xe6>
 76c:	ea e0       	ldi	r30, 0x0A	; 10
 76e:	2e 9e       	mul	r2, r30
 770:	20 0d       	add	r18, r0
 772:	11 24       	eor	r1, r1
 774:	22 2e       	mov	r2, r18
 776:	f3 2d       	mov	r31, r3
 778:	f0 62       	ori	r31, 0x20	; 32
 77a:	3f 2e       	mov	r3, r31
 77c:	08 c0       	rjmp	.+16     	; 0x78e <vfprintf+0xe6>
 77e:	8c 36       	cpi	r24, 0x6C	; 108
 780:	21 f4       	brne	.+8      	; 0x78a <vfprintf+0xe2>
 782:	83 2d       	mov	r24, r3
 784:	80 68       	ori	r24, 0x80	; 128
 786:	38 2e       	mov	r3, r24
 788:	02 c0       	rjmp	.+4      	; 0x78e <vfprintf+0xe6>
 78a:	88 36       	cpi	r24, 0x68	; 104
 78c:	41 f4       	brne	.+16     	; 0x79e <vfprintf+0xf6>
 78e:	f7 01       	movw	r30, r14
 790:	93 fd       	sbrc	r25, 3
 792:	85 91       	lpm	r24, Z+
 794:	93 ff       	sbrs	r25, 3
 796:	81 91       	ld	r24, Z+
 798:	7f 01       	movw	r14, r30
 79a:	81 11       	cpse	r24, r1
 79c:	b3 cf       	rjmp	.-154    	; 0x704 <vfprintf+0x5c>
 79e:	98 2f       	mov	r25, r24
 7a0:	9f 7d       	andi	r25, 0xDF	; 223
 7a2:	95 54       	subi	r25, 0x45	; 69
 7a4:	93 30       	cpi	r25, 0x03	; 3
 7a6:	28 f4       	brcc	.+10     	; 0x7b2 <vfprintf+0x10a>
 7a8:	0c 5f       	subi	r16, 0xFC	; 252
 7aa:	1f 4f       	sbci	r17, 0xFF	; 255
 7ac:	9f e3       	ldi	r25, 0x3F	; 63
 7ae:	99 83       	std	Y+1, r25	; 0x01
 7b0:	0d c0       	rjmp	.+26     	; 0x7cc <vfprintf+0x124>
 7b2:	83 36       	cpi	r24, 0x63	; 99
 7b4:	31 f0       	breq	.+12     	; 0x7c2 <vfprintf+0x11a>
 7b6:	83 37       	cpi	r24, 0x73	; 115
 7b8:	71 f0       	breq	.+28     	; 0x7d6 <vfprintf+0x12e>
 7ba:	83 35       	cpi	r24, 0x53	; 83
 7bc:	09 f0       	breq	.+2      	; 0x7c0 <vfprintf+0x118>
 7be:	59 c0       	rjmp	.+178    	; 0x872 <vfprintf+0x1ca>
 7c0:	21 c0       	rjmp	.+66     	; 0x804 <vfprintf+0x15c>
 7c2:	f8 01       	movw	r30, r16
 7c4:	80 81       	ld	r24, Z
 7c6:	89 83       	std	Y+1, r24	; 0x01
 7c8:	0e 5f       	subi	r16, 0xFE	; 254
 7ca:	1f 4f       	sbci	r17, 0xFF	; 255
 7cc:	88 24       	eor	r8, r8
 7ce:	83 94       	inc	r8
 7d0:	91 2c       	mov	r9, r1
 7d2:	53 01       	movw	r10, r6
 7d4:	13 c0       	rjmp	.+38     	; 0x7fc <vfprintf+0x154>
 7d6:	28 01       	movw	r4, r16
 7d8:	f2 e0       	ldi	r31, 0x02	; 2
 7da:	4f 0e       	add	r4, r31
 7dc:	51 1c       	adc	r5, r1
 7de:	f8 01       	movw	r30, r16
 7e0:	a0 80       	ld	r10, Z
 7e2:	b1 80       	ldd	r11, Z+1	; 0x01
 7e4:	36 fe       	sbrs	r3, 6
 7e6:	03 c0       	rjmp	.+6      	; 0x7ee <vfprintf+0x146>
 7e8:	69 2d       	mov	r22, r9
 7ea:	70 e0       	ldi	r23, 0x00	; 0
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <vfprintf+0x14a>
 7ee:	6f ef       	ldi	r22, 0xFF	; 255
 7f0:	7f ef       	ldi	r23, 0xFF	; 255
 7f2:	c5 01       	movw	r24, r10
 7f4:	0e 94 40 05 	call	0xa80	; 0xa80 <strnlen>
 7f8:	4c 01       	movw	r8, r24
 7fa:	82 01       	movw	r16, r4
 7fc:	f3 2d       	mov	r31, r3
 7fe:	ff 77       	andi	r31, 0x7F	; 127
 800:	3f 2e       	mov	r3, r31
 802:	16 c0       	rjmp	.+44     	; 0x830 <vfprintf+0x188>
 804:	28 01       	movw	r4, r16
 806:	22 e0       	ldi	r18, 0x02	; 2
 808:	42 0e       	add	r4, r18
 80a:	51 1c       	adc	r5, r1
 80c:	f8 01       	movw	r30, r16
 80e:	a0 80       	ld	r10, Z
 810:	b1 80       	ldd	r11, Z+1	; 0x01
 812:	36 fe       	sbrs	r3, 6
 814:	03 c0       	rjmp	.+6      	; 0x81c <vfprintf+0x174>
 816:	69 2d       	mov	r22, r9
 818:	70 e0       	ldi	r23, 0x00	; 0
 81a:	02 c0       	rjmp	.+4      	; 0x820 <vfprintf+0x178>
 81c:	6f ef       	ldi	r22, 0xFF	; 255
 81e:	7f ef       	ldi	r23, 0xFF	; 255
 820:	c5 01       	movw	r24, r10
 822:	0e 94 35 05 	call	0xa6a	; 0xa6a <strnlen_P>
 826:	4c 01       	movw	r8, r24
 828:	f3 2d       	mov	r31, r3
 82a:	f0 68       	ori	r31, 0x80	; 128
 82c:	3f 2e       	mov	r3, r31
 82e:	82 01       	movw	r16, r4
 830:	33 fc       	sbrc	r3, 3
 832:	1b c0       	rjmp	.+54     	; 0x86a <vfprintf+0x1c2>
 834:	82 2d       	mov	r24, r2
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	88 16       	cp	r8, r24
 83a:	99 06       	cpc	r9, r25
 83c:	b0 f4       	brcc	.+44     	; 0x86a <vfprintf+0x1c2>
 83e:	b6 01       	movw	r22, r12
 840:	80 e2       	ldi	r24, 0x20	; 32
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 848:	2a 94       	dec	r2
 84a:	f4 cf       	rjmp	.-24     	; 0x834 <vfprintf+0x18c>
 84c:	f5 01       	movw	r30, r10
 84e:	37 fc       	sbrc	r3, 7
 850:	85 91       	lpm	r24, Z+
 852:	37 fe       	sbrs	r3, 7
 854:	81 91       	ld	r24, Z+
 856:	5f 01       	movw	r10, r30
 858:	b6 01       	movw	r22, r12
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 860:	21 10       	cpse	r2, r1
 862:	2a 94       	dec	r2
 864:	21 e0       	ldi	r18, 0x01	; 1
 866:	82 1a       	sub	r8, r18
 868:	91 08       	sbc	r9, r1
 86a:	81 14       	cp	r8, r1
 86c:	91 04       	cpc	r9, r1
 86e:	71 f7       	brne	.-36     	; 0x84c <vfprintf+0x1a4>
 870:	e8 c0       	rjmp	.+464    	; 0xa42 <vfprintf+0x39a>
 872:	84 36       	cpi	r24, 0x64	; 100
 874:	11 f0       	breq	.+4      	; 0x87a <vfprintf+0x1d2>
 876:	89 36       	cpi	r24, 0x69	; 105
 878:	41 f5       	brne	.+80     	; 0x8ca <vfprintf+0x222>
 87a:	f8 01       	movw	r30, r16
 87c:	37 fe       	sbrs	r3, 7
 87e:	07 c0       	rjmp	.+14     	; 0x88e <vfprintf+0x1e6>
 880:	60 81       	ld	r22, Z
 882:	71 81       	ldd	r23, Z+1	; 0x01
 884:	82 81       	ldd	r24, Z+2	; 0x02
 886:	93 81       	ldd	r25, Z+3	; 0x03
 888:	0c 5f       	subi	r16, 0xFC	; 252
 88a:	1f 4f       	sbci	r17, 0xFF	; 255
 88c:	08 c0       	rjmp	.+16     	; 0x89e <vfprintf+0x1f6>
 88e:	60 81       	ld	r22, Z
 890:	71 81       	ldd	r23, Z+1	; 0x01
 892:	07 2e       	mov	r0, r23
 894:	00 0c       	add	r0, r0
 896:	88 0b       	sbc	r24, r24
 898:	99 0b       	sbc	r25, r25
 89a:	0e 5f       	subi	r16, 0xFE	; 254
 89c:	1f 4f       	sbci	r17, 0xFF	; 255
 89e:	f3 2d       	mov	r31, r3
 8a0:	ff 76       	andi	r31, 0x6F	; 111
 8a2:	3f 2e       	mov	r3, r31
 8a4:	97 ff       	sbrs	r25, 7
 8a6:	09 c0       	rjmp	.+18     	; 0x8ba <vfprintf+0x212>
 8a8:	90 95       	com	r25
 8aa:	80 95       	com	r24
 8ac:	70 95       	com	r23
 8ae:	61 95       	neg	r22
 8b0:	7f 4f       	sbci	r23, 0xFF	; 255
 8b2:	8f 4f       	sbci	r24, 0xFF	; 255
 8b4:	9f 4f       	sbci	r25, 0xFF	; 255
 8b6:	f0 68       	ori	r31, 0x80	; 128
 8b8:	3f 2e       	mov	r3, r31
 8ba:	2a e0       	ldi	r18, 0x0A	; 10
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	a3 01       	movw	r20, r6
 8c0:	0e 94 87 05 	call	0xb0e	; 0xb0e <__ultoa_invert>
 8c4:	88 2e       	mov	r8, r24
 8c6:	86 18       	sub	r8, r6
 8c8:	45 c0       	rjmp	.+138    	; 0x954 <vfprintf+0x2ac>
 8ca:	85 37       	cpi	r24, 0x75	; 117
 8cc:	31 f4       	brne	.+12     	; 0x8da <vfprintf+0x232>
 8ce:	23 2d       	mov	r18, r3
 8d0:	2f 7e       	andi	r18, 0xEF	; 239
 8d2:	b2 2e       	mov	r11, r18
 8d4:	2a e0       	ldi	r18, 0x0A	; 10
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	25 c0       	rjmp	.+74     	; 0x924 <vfprintf+0x27c>
 8da:	93 2d       	mov	r25, r3
 8dc:	99 7f       	andi	r25, 0xF9	; 249
 8de:	b9 2e       	mov	r11, r25
 8e0:	8f 36       	cpi	r24, 0x6F	; 111
 8e2:	c1 f0       	breq	.+48     	; 0x914 <vfprintf+0x26c>
 8e4:	18 f4       	brcc	.+6      	; 0x8ec <vfprintf+0x244>
 8e6:	88 35       	cpi	r24, 0x58	; 88
 8e8:	79 f0       	breq	.+30     	; 0x908 <vfprintf+0x260>
 8ea:	b5 c0       	rjmp	.+362    	; 0xa56 <vfprintf+0x3ae>
 8ec:	80 37       	cpi	r24, 0x70	; 112
 8ee:	19 f0       	breq	.+6      	; 0x8f6 <vfprintf+0x24e>
 8f0:	88 37       	cpi	r24, 0x78	; 120
 8f2:	21 f0       	breq	.+8      	; 0x8fc <vfprintf+0x254>
 8f4:	b0 c0       	rjmp	.+352    	; 0xa56 <vfprintf+0x3ae>
 8f6:	e9 2f       	mov	r30, r25
 8f8:	e0 61       	ori	r30, 0x10	; 16
 8fa:	be 2e       	mov	r11, r30
 8fc:	b4 fe       	sbrs	r11, 4
 8fe:	0d c0       	rjmp	.+26     	; 0x91a <vfprintf+0x272>
 900:	fb 2d       	mov	r31, r11
 902:	f4 60       	ori	r31, 0x04	; 4
 904:	bf 2e       	mov	r11, r31
 906:	09 c0       	rjmp	.+18     	; 0x91a <vfprintf+0x272>
 908:	34 fe       	sbrs	r3, 4
 90a:	0a c0       	rjmp	.+20     	; 0x920 <vfprintf+0x278>
 90c:	29 2f       	mov	r18, r25
 90e:	26 60       	ori	r18, 0x06	; 6
 910:	b2 2e       	mov	r11, r18
 912:	06 c0       	rjmp	.+12     	; 0x920 <vfprintf+0x278>
 914:	28 e0       	ldi	r18, 0x08	; 8
 916:	30 e0       	ldi	r19, 0x00	; 0
 918:	05 c0       	rjmp	.+10     	; 0x924 <vfprintf+0x27c>
 91a:	20 e1       	ldi	r18, 0x10	; 16
 91c:	30 e0       	ldi	r19, 0x00	; 0
 91e:	02 c0       	rjmp	.+4      	; 0x924 <vfprintf+0x27c>
 920:	20 e1       	ldi	r18, 0x10	; 16
 922:	32 e0       	ldi	r19, 0x02	; 2
 924:	f8 01       	movw	r30, r16
 926:	b7 fe       	sbrs	r11, 7
 928:	07 c0       	rjmp	.+14     	; 0x938 <vfprintf+0x290>
 92a:	60 81       	ld	r22, Z
 92c:	71 81       	ldd	r23, Z+1	; 0x01
 92e:	82 81       	ldd	r24, Z+2	; 0x02
 930:	93 81       	ldd	r25, Z+3	; 0x03
 932:	0c 5f       	subi	r16, 0xFC	; 252
 934:	1f 4f       	sbci	r17, 0xFF	; 255
 936:	06 c0       	rjmp	.+12     	; 0x944 <vfprintf+0x29c>
 938:	60 81       	ld	r22, Z
 93a:	71 81       	ldd	r23, Z+1	; 0x01
 93c:	80 e0       	ldi	r24, 0x00	; 0
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 5f       	subi	r16, 0xFE	; 254
 942:	1f 4f       	sbci	r17, 0xFF	; 255
 944:	a3 01       	movw	r20, r6
 946:	0e 94 87 05 	call	0xb0e	; 0xb0e <__ultoa_invert>
 94a:	88 2e       	mov	r8, r24
 94c:	86 18       	sub	r8, r6
 94e:	fb 2d       	mov	r31, r11
 950:	ff 77       	andi	r31, 0x7F	; 127
 952:	3f 2e       	mov	r3, r31
 954:	36 fe       	sbrs	r3, 6
 956:	0d c0       	rjmp	.+26     	; 0x972 <vfprintf+0x2ca>
 958:	23 2d       	mov	r18, r3
 95a:	2e 7f       	andi	r18, 0xFE	; 254
 95c:	a2 2e       	mov	r10, r18
 95e:	89 14       	cp	r8, r9
 960:	58 f4       	brcc	.+22     	; 0x978 <vfprintf+0x2d0>
 962:	34 fe       	sbrs	r3, 4
 964:	0b c0       	rjmp	.+22     	; 0x97c <vfprintf+0x2d4>
 966:	32 fc       	sbrc	r3, 2
 968:	09 c0       	rjmp	.+18     	; 0x97c <vfprintf+0x2d4>
 96a:	83 2d       	mov	r24, r3
 96c:	8e 7e       	andi	r24, 0xEE	; 238
 96e:	a8 2e       	mov	r10, r24
 970:	05 c0       	rjmp	.+10     	; 0x97c <vfprintf+0x2d4>
 972:	b8 2c       	mov	r11, r8
 974:	a3 2c       	mov	r10, r3
 976:	03 c0       	rjmp	.+6      	; 0x97e <vfprintf+0x2d6>
 978:	b8 2c       	mov	r11, r8
 97a:	01 c0       	rjmp	.+2      	; 0x97e <vfprintf+0x2d6>
 97c:	b9 2c       	mov	r11, r9
 97e:	a4 fe       	sbrs	r10, 4
 980:	0f c0       	rjmp	.+30     	; 0x9a0 <vfprintf+0x2f8>
 982:	fe 01       	movw	r30, r28
 984:	e8 0d       	add	r30, r8
 986:	f1 1d       	adc	r31, r1
 988:	80 81       	ld	r24, Z
 98a:	80 33       	cpi	r24, 0x30	; 48
 98c:	21 f4       	brne	.+8      	; 0x996 <vfprintf+0x2ee>
 98e:	9a 2d       	mov	r25, r10
 990:	99 7e       	andi	r25, 0xE9	; 233
 992:	a9 2e       	mov	r10, r25
 994:	09 c0       	rjmp	.+18     	; 0x9a8 <vfprintf+0x300>
 996:	a2 fe       	sbrs	r10, 2
 998:	06 c0       	rjmp	.+12     	; 0x9a6 <vfprintf+0x2fe>
 99a:	b3 94       	inc	r11
 99c:	b3 94       	inc	r11
 99e:	04 c0       	rjmp	.+8      	; 0x9a8 <vfprintf+0x300>
 9a0:	8a 2d       	mov	r24, r10
 9a2:	86 78       	andi	r24, 0x86	; 134
 9a4:	09 f0       	breq	.+2      	; 0x9a8 <vfprintf+0x300>
 9a6:	b3 94       	inc	r11
 9a8:	a3 fc       	sbrc	r10, 3
 9aa:	11 c0       	rjmp	.+34     	; 0x9ce <vfprintf+0x326>
 9ac:	a0 fe       	sbrs	r10, 0
 9ae:	06 c0       	rjmp	.+12     	; 0x9bc <vfprintf+0x314>
 9b0:	b2 14       	cp	r11, r2
 9b2:	88 f4       	brcc	.+34     	; 0x9d6 <vfprintf+0x32e>
 9b4:	28 0c       	add	r2, r8
 9b6:	92 2c       	mov	r9, r2
 9b8:	9b 18       	sub	r9, r11
 9ba:	0e c0       	rjmp	.+28     	; 0x9d8 <vfprintf+0x330>
 9bc:	b2 14       	cp	r11, r2
 9be:	60 f4       	brcc	.+24     	; 0x9d8 <vfprintf+0x330>
 9c0:	b6 01       	movw	r22, r12
 9c2:	80 e2       	ldi	r24, 0x20	; 32
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 9ca:	b3 94       	inc	r11
 9cc:	f7 cf       	rjmp	.-18     	; 0x9bc <vfprintf+0x314>
 9ce:	b2 14       	cp	r11, r2
 9d0:	18 f4       	brcc	.+6      	; 0x9d8 <vfprintf+0x330>
 9d2:	2b 18       	sub	r2, r11
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <vfprintf+0x332>
 9d6:	98 2c       	mov	r9, r8
 9d8:	21 2c       	mov	r2, r1
 9da:	a4 fe       	sbrs	r10, 4
 9dc:	10 c0       	rjmp	.+32     	; 0x9fe <vfprintf+0x356>
 9de:	b6 01       	movw	r22, r12
 9e0:	80 e3       	ldi	r24, 0x30	; 48
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 9e8:	a2 fe       	sbrs	r10, 2
 9ea:	17 c0       	rjmp	.+46     	; 0xa1a <vfprintf+0x372>
 9ec:	a1 fc       	sbrc	r10, 1
 9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <vfprintf+0x34e>
 9f0:	88 e7       	ldi	r24, 0x78	; 120
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <vfprintf+0x352>
 9f6:	88 e5       	ldi	r24, 0x58	; 88
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	b6 01       	movw	r22, r12
 9fc:	0c c0       	rjmp	.+24     	; 0xa16 <vfprintf+0x36e>
 9fe:	8a 2d       	mov	r24, r10
 a00:	86 78       	andi	r24, 0x86	; 134
 a02:	59 f0       	breq	.+22     	; 0xa1a <vfprintf+0x372>
 a04:	a1 fe       	sbrs	r10, 1
 a06:	02 c0       	rjmp	.+4      	; 0xa0c <vfprintf+0x364>
 a08:	8b e2       	ldi	r24, 0x2B	; 43
 a0a:	01 c0       	rjmp	.+2      	; 0xa0e <vfprintf+0x366>
 a0c:	80 e2       	ldi	r24, 0x20	; 32
 a0e:	a7 fc       	sbrc	r10, 7
 a10:	8d e2       	ldi	r24, 0x2D	; 45
 a12:	b6 01       	movw	r22, r12
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 a1a:	89 14       	cp	r8, r9
 a1c:	38 f4       	brcc	.+14     	; 0xa2c <vfprintf+0x384>
 a1e:	b6 01       	movw	r22, r12
 a20:	80 e3       	ldi	r24, 0x30	; 48
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 a28:	9a 94       	dec	r9
 a2a:	f7 cf       	rjmp	.-18     	; 0xa1a <vfprintf+0x372>
 a2c:	8a 94       	dec	r8
 a2e:	f3 01       	movw	r30, r6
 a30:	e8 0d       	add	r30, r8
 a32:	f1 1d       	adc	r31, r1
 a34:	80 81       	ld	r24, Z
 a36:	b6 01       	movw	r22, r12
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 a3e:	81 10       	cpse	r8, r1
 a40:	f5 cf       	rjmp	.-22     	; 0xa2c <vfprintf+0x384>
 a42:	22 20       	and	r2, r2
 a44:	09 f4       	brne	.+2      	; 0xa48 <vfprintf+0x3a0>
 a46:	42 ce       	rjmp	.-892    	; 0x6cc <vfprintf+0x24>
 a48:	b6 01       	movw	r22, r12
 a4a:	80 e2       	ldi	r24, 0x20	; 32
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	0e 94 4b 05 	call	0xa96	; 0xa96 <fputc>
 a52:	2a 94       	dec	r2
 a54:	f6 cf       	rjmp	.-20     	; 0xa42 <vfprintf+0x39a>
 a56:	f6 01       	movw	r30, r12
 a58:	86 81       	ldd	r24, Z+6	; 0x06
 a5a:	97 81       	ldd	r25, Z+7	; 0x07
 a5c:	02 c0       	rjmp	.+4      	; 0xa62 <vfprintf+0x3ba>
 a5e:	8f ef       	ldi	r24, 0xFF	; 255
 a60:	9f ef       	ldi	r25, 0xFF	; 255
 a62:	2b 96       	adiw	r28, 0x0b	; 11
 a64:	e2 e1       	ldi	r30, 0x12	; 18
 a66:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__epilogue_restores__>

00000a6a <strnlen_P>:
 a6a:	fc 01       	movw	r30, r24
 a6c:	05 90       	lpm	r0, Z+
 a6e:	61 50       	subi	r22, 0x01	; 1
 a70:	70 40       	sbci	r23, 0x00	; 0
 a72:	01 10       	cpse	r0, r1
 a74:	d8 f7       	brcc	.-10     	; 0xa6c <strnlen_P+0x2>
 a76:	80 95       	com	r24
 a78:	90 95       	com	r25
 a7a:	8e 0f       	add	r24, r30
 a7c:	9f 1f       	adc	r25, r31
 a7e:	08 95       	ret

00000a80 <strnlen>:
 a80:	fc 01       	movw	r30, r24
 a82:	61 50       	subi	r22, 0x01	; 1
 a84:	70 40       	sbci	r23, 0x00	; 0
 a86:	01 90       	ld	r0, Z+
 a88:	01 10       	cpse	r0, r1
 a8a:	d8 f7       	brcc	.-10     	; 0xa82 <strnlen+0x2>
 a8c:	80 95       	com	r24
 a8e:	90 95       	com	r25
 a90:	8e 0f       	add	r24, r30
 a92:	9f 1f       	adc	r25, r31
 a94:	08 95       	ret

00000a96 <fputc>:
 a96:	0f 93       	push	r16
 a98:	1f 93       	push	r17
 a9a:	cf 93       	push	r28
 a9c:	df 93       	push	r29
 a9e:	fb 01       	movw	r30, r22
 aa0:	23 81       	ldd	r18, Z+3	; 0x03
 aa2:	21 fd       	sbrc	r18, 1
 aa4:	03 c0       	rjmp	.+6      	; 0xaac <fputc+0x16>
 aa6:	8f ef       	ldi	r24, 0xFF	; 255
 aa8:	9f ef       	ldi	r25, 0xFF	; 255
 aaa:	2c c0       	rjmp	.+88     	; 0xb04 <fputc+0x6e>
 aac:	22 ff       	sbrs	r18, 2
 aae:	16 c0       	rjmp	.+44     	; 0xadc <fputc+0x46>
 ab0:	46 81       	ldd	r20, Z+6	; 0x06
 ab2:	57 81       	ldd	r21, Z+7	; 0x07
 ab4:	24 81       	ldd	r18, Z+4	; 0x04
 ab6:	35 81       	ldd	r19, Z+5	; 0x05
 ab8:	42 17       	cp	r20, r18
 aba:	53 07       	cpc	r21, r19
 abc:	44 f4       	brge	.+16     	; 0xace <fputc+0x38>
 abe:	a0 81       	ld	r26, Z
 ac0:	b1 81       	ldd	r27, Z+1	; 0x01
 ac2:	9d 01       	movw	r18, r26
 ac4:	2f 5f       	subi	r18, 0xFF	; 255
 ac6:	3f 4f       	sbci	r19, 0xFF	; 255
 ac8:	20 83       	st	Z, r18
 aca:	31 83       	std	Z+1, r19	; 0x01
 acc:	8c 93       	st	X, r24
 ace:	26 81       	ldd	r18, Z+6	; 0x06
 ad0:	37 81       	ldd	r19, Z+7	; 0x07
 ad2:	2f 5f       	subi	r18, 0xFF	; 255
 ad4:	3f 4f       	sbci	r19, 0xFF	; 255
 ad6:	26 83       	std	Z+6, r18	; 0x06
 ad8:	37 83       	std	Z+7, r19	; 0x07
 ada:	14 c0       	rjmp	.+40     	; 0xb04 <fputc+0x6e>
 adc:	8b 01       	movw	r16, r22
 ade:	ec 01       	movw	r28, r24
 ae0:	fb 01       	movw	r30, r22
 ae2:	00 84       	ldd	r0, Z+8	; 0x08
 ae4:	f1 85       	ldd	r31, Z+9	; 0x09
 ae6:	e0 2d       	mov	r30, r0
 ae8:	09 95       	icall
 aea:	89 2b       	or	r24, r25
 aec:	e1 f6       	brne	.-72     	; 0xaa6 <fputc+0x10>
 aee:	d8 01       	movw	r26, r16
 af0:	16 96       	adiw	r26, 0x06	; 6
 af2:	8d 91       	ld	r24, X+
 af4:	9c 91       	ld	r25, X
 af6:	17 97       	sbiw	r26, 0x07	; 7
 af8:	01 96       	adiw	r24, 0x01	; 1
 afa:	16 96       	adiw	r26, 0x06	; 6
 afc:	8d 93       	st	X+, r24
 afe:	9c 93       	st	X, r25
 b00:	17 97       	sbiw	r26, 0x07	; 7
 b02:	ce 01       	movw	r24, r28
 b04:	df 91       	pop	r29
 b06:	cf 91       	pop	r28
 b08:	1f 91       	pop	r17
 b0a:	0f 91       	pop	r16
 b0c:	08 95       	ret

00000b0e <__ultoa_invert>:
 b0e:	fa 01       	movw	r30, r20
 b10:	aa 27       	eor	r26, r26
 b12:	28 30       	cpi	r18, 0x08	; 8
 b14:	51 f1       	breq	.+84     	; 0xb6a <__ultoa_invert+0x5c>
 b16:	20 31       	cpi	r18, 0x10	; 16
 b18:	81 f1       	breq	.+96     	; 0xb7a <__ultoa_invert+0x6c>
 b1a:	e8 94       	clt
 b1c:	6f 93       	push	r22
 b1e:	6e 7f       	andi	r22, 0xFE	; 254
 b20:	6e 5f       	subi	r22, 0xFE	; 254
 b22:	7f 4f       	sbci	r23, 0xFF	; 255
 b24:	8f 4f       	sbci	r24, 0xFF	; 255
 b26:	9f 4f       	sbci	r25, 0xFF	; 255
 b28:	af 4f       	sbci	r26, 0xFF	; 255
 b2a:	b1 e0       	ldi	r27, 0x01	; 1
 b2c:	3e d0       	rcall	.+124    	; 0xbaa <__ultoa_invert+0x9c>
 b2e:	b4 e0       	ldi	r27, 0x04	; 4
 b30:	3c d0       	rcall	.+120    	; 0xbaa <__ultoa_invert+0x9c>
 b32:	67 0f       	add	r22, r23
 b34:	78 1f       	adc	r23, r24
 b36:	89 1f       	adc	r24, r25
 b38:	9a 1f       	adc	r25, r26
 b3a:	a1 1d       	adc	r26, r1
 b3c:	68 0f       	add	r22, r24
 b3e:	79 1f       	adc	r23, r25
 b40:	8a 1f       	adc	r24, r26
 b42:	91 1d       	adc	r25, r1
 b44:	a1 1d       	adc	r26, r1
 b46:	6a 0f       	add	r22, r26
 b48:	71 1d       	adc	r23, r1
 b4a:	81 1d       	adc	r24, r1
 b4c:	91 1d       	adc	r25, r1
 b4e:	a1 1d       	adc	r26, r1
 b50:	20 d0       	rcall	.+64     	; 0xb92 <__ultoa_invert+0x84>
 b52:	09 f4       	brne	.+2      	; 0xb56 <__ultoa_invert+0x48>
 b54:	68 94       	set
 b56:	3f 91       	pop	r19
 b58:	2a e0       	ldi	r18, 0x0A	; 10
 b5a:	26 9f       	mul	r18, r22
 b5c:	11 24       	eor	r1, r1
 b5e:	30 19       	sub	r19, r0
 b60:	30 5d       	subi	r19, 0xD0	; 208
 b62:	31 93       	st	Z+, r19
 b64:	de f6       	brtc	.-74     	; 0xb1c <__ultoa_invert+0xe>
 b66:	cf 01       	movw	r24, r30
 b68:	08 95       	ret
 b6a:	46 2f       	mov	r20, r22
 b6c:	47 70       	andi	r20, 0x07	; 7
 b6e:	40 5d       	subi	r20, 0xD0	; 208
 b70:	41 93       	st	Z+, r20
 b72:	b3 e0       	ldi	r27, 0x03	; 3
 b74:	0f d0       	rcall	.+30     	; 0xb94 <__ultoa_invert+0x86>
 b76:	c9 f7       	brne	.-14     	; 0xb6a <__ultoa_invert+0x5c>
 b78:	f6 cf       	rjmp	.-20     	; 0xb66 <__ultoa_invert+0x58>
 b7a:	46 2f       	mov	r20, r22
 b7c:	4f 70       	andi	r20, 0x0F	; 15
 b7e:	40 5d       	subi	r20, 0xD0	; 208
 b80:	4a 33       	cpi	r20, 0x3A	; 58
 b82:	18 f0       	brcs	.+6      	; 0xb8a <__ultoa_invert+0x7c>
 b84:	49 5d       	subi	r20, 0xD9	; 217
 b86:	31 fd       	sbrc	r19, 1
 b88:	40 52       	subi	r20, 0x20	; 32
 b8a:	41 93       	st	Z+, r20
 b8c:	02 d0       	rcall	.+4      	; 0xb92 <__ultoa_invert+0x84>
 b8e:	a9 f7       	brne	.-22     	; 0xb7a <__ultoa_invert+0x6c>
 b90:	ea cf       	rjmp	.-44     	; 0xb66 <__ultoa_invert+0x58>
 b92:	b4 e0       	ldi	r27, 0x04	; 4
 b94:	a6 95       	lsr	r26
 b96:	97 95       	ror	r25
 b98:	87 95       	ror	r24
 b9a:	77 95       	ror	r23
 b9c:	67 95       	ror	r22
 b9e:	ba 95       	dec	r27
 ba0:	c9 f7       	brne	.-14     	; 0xb94 <__ultoa_invert+0x86>
 ba2:	00 97       	sbiw	r24, 0x00	; 0
 ba4:	61 05       	cpc	r22, r1
 ba6:	71 05       	cpc	r23, r1
 ba8:	08 95       	ret
 baa:	9b 01       	movw	r18, r22
 bac:	ac 01       	movw	r20, r24
 bae:	0a 2e       	mov	r0, r26
 bb0:	06 94       	lsr	r0
 bb2:	57 95       	ror	r21
 bb4:	47 95       	ror	r20
 bb6:	37 95       	ror	r19
 bb8:	27 95       	ror	r18
 bba:	ba 95       	dec	r27
 bbc:	c9 f7       	brne	.-14     	; 0xbb0 <__ultoa_invert+0xa2>
 bbe:	62 0f       	add	r22, r18
 bc0:	73 1f       	adc	r23, r19
 bc2:	84 1f       	adc	r24, r20
 bc4:	95 1f       	adc	r25, r21
 bc6:	a0 1d       	adc	r26, r0
 bc8:	08 95       	ret

00000bca <__prologue_saves__>:
 bca:	2f 92       	push	r2
 bcc:	3f 92       	push	r3
 bce:	4f 92       	push	r4
 bd0:	5f 92       	push	r5
 bd2:	6f 92       	push	r6
 bd4:	7f 92       	push	r7
 bd6:	8f 92       	push	r8
 bd8:	9f 92       	push	r9
 bda:	af 92       	push	r10
 bdc:	bf 92       	push	r11
 bde:	cf 92       	push	r12
 be0:	df 92       	push	r13
 be2:	ef 92       	push	r14
 be4:	ff 92       	push	r15
 be6:	0f 93       	push	r16
 be8:	1f 93       	push	r17
 bea:	cf 93       	push	r28
 bec:	df 93       	push	r29
 bee:	cd b7       	in	r28, 0x3d	; 61
 bf0:	de b7       	in	r29, 0x3e	; 62
 bf2:	ca 1b       	sub	r28, r26
 bf4:	db 0b       	sbc	r29, r27
 bf6:	cd bf       	out	0x3d, r28	; 61
 bf8:	de bf       	out	0x3e, r29	; 62
 bfa:	09 94       	ijmp

00000bfc <__epilogue_restores__>:
 bfc:	2a 88       	ldd	r2, Y+18	; 0x12
 bfe:	39 88       	ldd	r3, Y+17	; 0x11
 c00:	48 88       	ldd	r4, Y+16	; 0x10
 c02:	5f 84       	ldd	r5, Y+15	; 0x0f
 c04:	6e 84       	ldd	r6, Y+14	; 0x0e
 c06:	7d 84       	ldd	r7, Y+13	; 0x0d
 c08:	8c 84       	ldd	r8, Y+12	; 0x0c
 c0a:	9b 84       	ldd	r9, Y+11	; 0x0b
 c0c:	aa 84       	ldd	r10, Y+10	; 0x0a
 c0e:	b9 84       	ldd	r11, Y+9	; 0x09
 c10:	c8 84       	ldd	r12, Y+8	; 0x08
 c12:	df 80       	ldd	r13, Y+7	; 0x07
 c14:	ee 80       	ldd	r14, Y+6	; 0x06
 c16:	fd 80       	ldd	r15, Y+5	; 0x05
 c18:	0c 81       	ldd	r16, Y+4	; 0x04
 c1a:	1b 81       	ldd	r17, Y+3	; 0x03
 c1c:	aa 81       	ldd	r26, Y+2	; 0x02
 c1e:	b9 81       	ldd	r27, Y+1	; 0x01
 c20:	ce 0f       	add	r28, r30
 c22:	d1 1d       	adc	r29, r1
 c24:	cd bf       	out	0x3d, r28	; 61
 c26:	de bf       	out	0x3e, r29	; 62
 c28:	ed 01       	movw	r28, r26
 c2a:	08 95       	ret

00000c2c <_exit>:
 c2c:	f8 94       	cli

00000c2e <__stop_program>:
 c2e:	ff cf       	rjmp	.-2      	; 0xc2e <__stop_program>
